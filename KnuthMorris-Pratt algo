// C Program to implement KnuthMorris-Pratt algorithm

#include <stdio.h>
#include <string.h>

// Function to compute the longest prefix-suffix (LPS) array
void computeLPSArray(char *pattern, int m, int lps[]) {
    int len = 0;  // length of the previous longest prefix suffix
    lps[0] = 0;   // lps[0] is always 0

    int i = 1;
    while (i < m) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// KMP search function
void KMPSearch(char *pattern, char *text) {
    int m = strlen(pattern);
    int n = strlen(text);

    int lps[m];  // LPS (longest prefix suffix) array

    // Preprocess the pattern
    computeLPSArray(pattern, m, lps);

    int i = 0; // index for text[]
    int j = 0; // index for pattern[]
    while (i < n) {
        if (pattern[j] == text[i]) {
            j++;
            i++;
        }

        if (j == m) {
            printf("Pattern found at index %d\n", i - j);
            j = lps[j - 1];
        }

        // mismatch after j matches
        else if (i < n && pattern[j] != text[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }
    }
}

int main() {
    char text[100], pattern[100];

    printf("Enter the text: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0';

    printf("Enter the pattern: ");
    fgets(pattern, sizeof(pattern), stdin);
    pattern[strcspn(pattern, "\n")] = '\0';

    KMPSearch(pattern, text);

    return 0;
}

/* OUTPUT
Enter the text: ABABDABACDABABCABAB
Enter the pattern: ABABCABAB
Pattern found at index 10
*/
