/* C Program that implements Kruskal algorithm to find the minimum
spanning tree (MST) of a graph.
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Edge structure
struct Edge {
    int u, v, w;
};

// Function to compare edges based on weight
int compare(const void* a, const void* b) {
    return ((struct Edge*)a)->w - ((struct Edge*)b)->w;
}

// Find root of a vertex with path compression
int find(int parent[], int i) {
    if (parent[i] != i)
        parent[i] = find(parent, parent[i]);
    return parent[i];
}

// Union of two sets by rank
void unionSets(int parent[], int rank[], int x, int y) {
    int xroot = find(parent, x);
    int yroot = find(parent, y);

    if (rank[xroot] < rank[yroot])
        parent[xroot] = yroot;
    else if (rank[xroot] > rank[yroot])
        parent[yroot] = xroot;
    else {
        parent[yroot] = xroot;
        rank[xroot]++;
    }
}

int main() {
    int V, E;

    printf("Enter number of vertices: ");
    scanf("%d", &V);

    printf("Enter number of edges: ");
    scanf("%d", &E);

    struct Edge edges[MAX];

    printf("Enter edges (u v weight):\n");
    for (int i = 0; i < E; i++) {
        printf("Edge %d: ", i + 1);
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);
    }

    // Sort edges by weight
    qsort(edges, E, sizeof(struct Edge), compare);

    // Initialize disjoint sets
    int parent[V], rank[V];
    for (int i = 0; i < V; i++) {
        parent[i] = i;
        rank[i] = 0;
    }

    int mstWeight = 0;
    printf("\nEdges in the Minimum Spanning Tree:\n");

    for (int i = 0, count = 0; count < V - 1 && i < E; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int set_u = find(parent, u);
        int set_v = find(parent, v);

        if (set_u != set_v) {
            printf("%d -- %d == %d\n", u, v, edges[i].w);
            mstWeight += edges[i].w;
            unionSets(parent, rank, set_u, set_v);
            count++;
        }
    }

    printf("Total weight of MST = %d\n", mstWeight);

    return 0;
}

/* OUTPUT
Enter number of vertices: 6
Enter number of edges: 9
Enter edges (u v weight):
Edge 1: 0 1 6
Edge 2: 0 2 3
Edge 3: 1 4 1
Edge 4: 4 3 5
Edge 5: 2 3 1
Edge 6: 4 5 8
Edge 7: 5 0 4
Edge 8: 0 4 5
Edge 9: 1 2 2

Edges in the Minimum Spanning Tree:
1 -- 4 == 1
2 -- 3 == 1
1 -- 2 == 2
0 -- 2 == 3
5 -- 0 == 4
Total weight of MST = 11
*/
