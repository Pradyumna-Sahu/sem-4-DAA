/* C Program to implement the Bellman-Ford algorithm to find the shortest path from 
a source vertex to all other vertices in a weighted directed graph.
Your program should also detect the presence of a negative-weight cycle in the graph.
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX 100
#define INF 99999  // Large value to simulate infinity

typedef struct {
    int src, dest, weight;
} Edge;

typedef struct {
    int V, E;
    Edge edges[MAX];
} Graph;

void bellmanFord(Graph *graph, int source) {
    int V = graph->V;
    int E = graph->E;
    int dist[MAX];

    // Initialize distances
    for (int i = 0; i < V; i++)
        dist[i] = INF;
    dist[source] = 0;

    // Relax all edges V-1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = graph->edges[j].src;
            int v = graph->edges[j].dest;
            int weight = graph->edges[j].weight;
            if (dist[u] != INF && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }

    // Check for negative-weight cycles
    for (int j = 0; j < E; j++) {
        int u = graph->edges[j].src;
        int v = graph->edges[j].dest;
        int weight = graph->edges[j].weight;
        if (dist[u] != INF && dist[u] + weight < dist[v]) {
            printf("Graph contains a negative-weight cycle\n");
            return;
        }
    }

    // Print distances
    printf("Vertex\tDistance from Source %d\n", source);
    for (int i = 0; i < V; i++) {
        if (dist[i] == INF)
            printf("%d\tINF\n", i);
        else
            printf("%d\t%d\n", i, dist[i]);
    }
}

int main() {
    Graph graph;
    int source;

    printf("Enter number of vertices: ");
    scanf("%d", &graph.V);
    printf("Enter number of edges: ");
    scanf("%d", &graph.E);

    printf("Enter each edge in the format: source destination weight\n");
    for (int i = 0; i < graph.E; i++) {
        scanf("%d %d %d", &graph.edges[i].src, &graph.edges[i].dest, &graph.edges[i].weight);
    }

    printf("Enter source vertex: ");
    scanf("%d", &source);

    if (source < 0 || source >= graph.V) {
        printf("Invalid source vertex. Please enter a vertex between 0 and %d\n", graph.V - 1);
        return 1;
    }

    bellmanFord(&graph, source);

    return 0;
}

/* OUTPUT
Enter number of vertices: 5
Enter number of edges: 8
Enter each edge in the format: source destination weight
0 1 -1
0 2 4
1 2 3
1 3 2
1 4 2
3 2 5
3 1 1
4 3 -3
Enter source vertex: 0
Vertex	Distance from Source 0
0	0
1	-1
2	2
3	-2
4	1
*/
