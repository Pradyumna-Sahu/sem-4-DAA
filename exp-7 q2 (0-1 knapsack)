/* C Program that finds an optimal solution to the following 0/1 knapsack instance. 
Capacity of knapsackis M. We have N objects with their respective weights a set W and a profit set P.
Fill the kanpsack that maximizes total profit.
*/

#include <stdio.h>
#include <stdlib.h>

// Function to find the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve the 0/1 Knapsack problem
void knapsack(int W[], int P[], int n, int M) {
    int K[n + 1][M + 1]; // DP table to store maximum profits

    // Build table K[][] in bottom up manner
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= M; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (W[i - 1] <= w)
                K[i][w] = max(P[i - 1] + K[i - 1][w - W[i - 1]], K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }

    // Maximum profit obtained
    int maxProfit = K[n][M];
    printf("Maximum profit: %d\n", maxProfit);

    // Find which items were included in the knapsack
    printf("Items included: ");
    int w = M;
    for (int i = n; i > 0 && maxProfit > 0; i--) {
        if (maxProfit == K[i - 1][w])
            continue; // Item not included
        else {
            printf("%d ", i - 1); // Item included (index)
            maxProfit = maxProfit - P[i - 1];
            w = w - W[i - 1];
        }
    }
    printf("\n");
}

int main() {
    int W[] = {2, 3, 4, 5}; // Weights of items
    int P[] = {3, 7, 2, 9}; // Profits of items
    int n = sizeof(W) / sizeof(W[0]); // Number of items
    int M = 7; // Capacity of knapsack

    knapsack(W, P, n, M);

    return 0;
}

/* OUTPUT
Maximum profit: 12
Items included: 3 0 
*/
