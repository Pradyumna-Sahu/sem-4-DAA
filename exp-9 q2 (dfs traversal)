// C Program that finds the DFS Tree for given graph G = (V, E). Also write the function to print vertice from source S to V.

#include <stdio.h>
#include<stdlib.h>
#define max 100

int adj[max][max];
int visited[max];
int stack[max];

void dfs(int source, int n) {
    int top = -1;
    stack[++top] = source;
    visited[source] = 1;
    
    printf("DFS Travesal starting from %d node:\n",source);
    
    while(top >= 0) {
        int node = stack[top--];
        printf("%d ",node);
        
        for(int v = n - 1; v >= 0; v--) {
            if(adj[node][v] == 1 && !visited[v]) {
                stack[++top] = v;
                visited[v] = 1;
            }
        }
    }
    printf("\n");
}

void print(int n) {
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            printf("%d ",adj[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n, edges, src, u, v;
    
    printf("Enter number of nodes: ");
    scanf("%d",&n);
    
    printf("Enter number of edges: ");
    scanf("%d",&edges);
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            adj[i][j] = 0;
        }
        visited[i] = 0;
    }
    
    printf("Enter edges (u v):\n");
    for(int i = 0; i < edges; i++) {
        scanf("%d %d", &u, &v);
        adj[u][v] = adj[v][u] = 1;
    }
    
    printf("Enter the source node for DFS Traversal: ");
    scanf("%d", &src);
    
    print(n);
    dfs(src, n);
    
    return 0;
}

/* OUTPUT
Enter number of nodes: 5
Enter number of edges: 6
Enter edges (u v):
0 1
0 2
1 3
1 4
2 3
3 4
Enter the source node for DFS Traversal: 0
0 1 1 0 0 
1 0 0 1 1 
1 0 0 1 0 
0 1 1 0 1 
0 1 0 1 0 
DFS Travesal starting from 0 node:
0 1 3 4 2 
*/
