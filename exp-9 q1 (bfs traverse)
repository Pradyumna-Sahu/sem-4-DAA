//C Program that finds BFS Tree for given Grapg G=(V,E). Also write the function to print the vertices from the source to destination.

#include <stdio.h>
#include<stdlib.h>
#define max 100

int adj[max][max];
int visited[max];
int queue[max];

void bfs(int source, int n) {
    int front = 0, rear = 0;
    queue[rear++] = source;
    visited[source] = 1;
    
    printf("BFS Traversal starting from %d node: ",source);
    
    while(front < rear) {
        int node = queue[front++];
        printf("%d ", node);
        for(int v = 0; v < n; v++) {
            if(adj[node][v] == 1 && !visited[v]) {
                queue[rear++] = v;
                visited[v] = 1;
            }
        }
    }
    printf("\n");
}

void print(int n) {
    printf("Adjacency LIST:\n");
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            printf("%d ", adj[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n, edges, src, u, v;
    
    printf("Enter number of nodes: ");
    scanf("%d",&n);
    printf("Enter number of edges: ");
    scanf("%d",&edges);
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            adj[i][j] = 0;
        }
        visited[i] = 0;
    }
    
    printf("Enter edge (u v): \n");
    for(int i = 0; i< edges; i++) {
        scanf("%d %d", &u, &v);
        adj[u][v] = adj[v][u] = 1;
    }
    
    printf("Enter source to start BFS Traversal: ");
    scanf("%d", &src);
    
    print(n);
    bfs(src, n);
    
    return 0;
}

/* OUTPUT
Enter number of nodes: 5
Enter number of edges: 6
Enter edge (u v): 
0 1
0 2
1 3
1 4
2 3
3 4
Enter source to start BFS Traversal: 0
Adjacency LIST:
0 1 1 0 0 
1 0 0 1 1 
1 0 0 1 0 
0 1 1 0 1 
0 1 0 1 0 
BFS Traversal starting from 0 node: 0 1 2 3 4 
*/
